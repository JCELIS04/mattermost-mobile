name: Detox E2E Android Tests PR

on:
    push:
      branches:
        - test_android_e2e
    pull_request:
      branches:
        - main
        - test_android_e2e
      types:
        - labeled

concurrency:
    group: "${{ github.workflow }}-${{ github.event.pull_request.number }}-${{ github.event.label.name }}"
    cancel-in-progress: true

jobs:
    build-android-apk:
        if: github.event.label.name == 'E2E Android tests for PR' && false
        runs-on: ubuntu-latest-8-cores
        env:
            ORG_GRADLE_PROJECT_jvmargs: -Xmx8g
        steps:
            - name: Prune Docker to free up space
              run: docker system prune -af

            - name: Remove npm Temporary Files
              run: |
               rm -rf ~/.npm/_cacache

            - name: ci/checkout-repo
              uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
              with:
                ref: ${{ github.event.pull_request.head.sha }}

            - name: ci/prepare-android-build
              uses: ./.github/actions/prepare-android-build
              env:
                STORE_FILE: "${{ secrets.MM_MOBILE_STORE_FILE }}"
                STORE_ALIAS: "${{ secrets.MM_MOBILE_STORE_ALIAS }}"
                STORE_PASSWORD: "${{ secrets.MM_MOBILE_STORE_PASSWORD }}"
                MATTERMOST_BUILD_GH_TOKEN: "${{ secrets.MATTERMOST_BUILD_GH_TOKEN }}"

            - name: Install Dependencies
              run: sudo apt-get clean && sudo apt-get update && sudo apt-get install -y default-jdk
      
            - name: Cache Gradle dependencies
              uses: actions/cache@v4
              with:
                path: ~/.gradle/caches/modules-2/
                key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                restore-keys: ${{ runner.os }}-gradle-

            - name: Detox build
              run: |
                cd detox
                npm install
                npm install -g detox-cli
                npm run e2e:android-build

            - name: ci/upload-android-pr-build
              uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
              with:
                name: android-build-apk-${{ github.run_id }}
                path: "android/app/build/outputs/apk/**/app-*.apk"

    run-android-tests:
      # if: github.event.label.name == 'E2E Android tests for PR'
      # needs: build-android-apk
      runs-on: macos-13

      env:
        SDK_VERSION: 31
        AVD_NAME: "detox_pixel_4_xl_api_31"
        ARCH: "x86_64"

      steps:
        - name: ci/checkout-repo
          uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
          with:
            ref: ${{ github.event.pull_request.head.sha }}

        - name: ci/prepare-android-build
          uses: ./.github/actions/prepare-android-build
          env:
            STORE_FILE: "${{ secrets.MM_MOBILE_STORE_FILE }}"
            STORE_ALIAS: "${{ secrets.MM_MOBILE_STORE_ALIAS }}"
            STORE_PASSWORD: "${{ secrets.MM_MOBILE_STORE_PASSWORD }}"
            MATTERMOST_BUILD_GH_TOKEN: "${{ secrets.MATTERMOST_BUILD_GH_TOKEN }}"

        # - name: Download APK artifact
        #   uses: actions/download-artifact@v4
        #   with:
        #     name: android-build-apk-13046110009
        #     path: android/app/build/outputs/apk/

        - name: Create destination path
          run: mkdir -p android/app/build/outputs/apk

        - name: Download artifact
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            curl -L -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/mattermost/mattermost-mobile/actions/artifacts/2508660502/zip \
                --output android/app/build/outputs/apk/artifact.zip

        - name: Unzip artifact
          run: unzip android/app/build/outputs/apk/artifact.zip -d android/app/build/outputs/apk

        - name: List unzipped files
          run: ls -la android/app/build/outputs/apk

        - name: Cleanup
          run: |
            find android/app/build -type f
            rm android/app/build/outputs/apk/artifact.zip

        - name: Cache Gradle dependencies
          uses: actions/cache@v4
          with:
            path: ~/.gradle/caches/modules-2/
            key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
            restore-keys: ${{ runner.os }}-gradle-

        - name: Setup Android SDK
          run: |
            # Accept licenses first
            yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
            
            # Install required packages
            echo "Installing system image..."
            $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install \
              "system-images;android-31;google_apis;x86_64" \
              "platform-tools" \
              "platforms;android-31" \
              "emulator"
            
            # Kill any existing ADB server and free port 5037
            $ANDROID_HOME/platform-tools/adb kill-server || true
            lsof -ti:5037 | xargs kill -9 || true

            # Start ADB server as root
            sudo $ANDROID_HOME/platform-tools/adb start-server

        - name: Create and start emulator
          run: |
            # Create AVD
            echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
              -n ${{ env.AVD_NAME }} \
              -k "system-images;android-31;google_apis;x86_64" \
              --force \
              --device "pixel_2"

            # Start ADB server first
            $ANDROID_HOME/platform-tools/adb start-server

            # Export required environment variables
            export QEMU_AUDIO_DRV=none
            export ANDROID_SDK_ROOT=$ANDROID_HOME
            
            # Start emulator with specific configurations
            nohup $ANDROID_HOME/emulator/emulator \
              -avd ${{ env.AVD_NAME }} \
              -no-window \
              -no-snapshot \
              -no-audio \
              -no-boot-anim \
              -camera-back none \
              -camera-front none \
              -gpu swiftshader_indirect \
              -memory 4096 \
              -accel off \
              -cores 2 > emulator.log 2>&1 &

            # Wait for device to be available first
            echo "Waiting for emulator to start..."
            timeout=600 # 10 minutes timeout
            while [[ $(adb devices | grep emulator | wc -l) -eq 0 ]]; do
              sleep 5
              timeout=$((timeout - 5))
              if [[ $timeout -le 0 ]]; then
                echo "Emulator failed to start within time limit."
                cat emulator.log
                exit 1
              fi
            done
            echo "Emulator is up and running."

            # More robust boot completion check
            BOOT_COMPLETE=false
            for i in {1..60}; do
              if adb shell getprop sys.boot_completed 2>&1 | grep -q '1'; then
                BOOT_COMPLETE=true
                break
              fi

              # Check ADB server status and restart if needed
              if ! adb get-state 1>/dev/null 2>&1; then
                echo "ADB server not responding, restarting..."
                adb kill-server
                adb start-server
              fi

              echo "Waiting for boot complete... ($i/60)"
              sleep 5
            done

            if [ "$BOOT_COMPLETE" = false ]; then
              echo "Failed to boot emulator"
              adb logcat -d
              exit 1
            fi

            # Additional device setup
            adb shell settings put global window_animation_scale 0
            adb shell settings put global transition_animation_scale 0
            adb shell settings put global animator_duration_scale 0

            cd detox
            npm install
            npm run e2e:android-test -- about.e2e.ts
        # - name: Run Detox tests
        #   run: |
        #     cd detox
        #     npm install
        #     npm install -g detox-cli
        #     npm run e2e:android-test -- about.e2e.ts
